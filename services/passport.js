const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');//object that has google client id and secret
const mongoose = require('mongoose');

const User = mongoose.model('users');//one argument gets something out of the model

//user here is what we just pulled out of the database
//every user will have a user.id generated by mongo but the user may not have 
//a google id because they could be signing in with facebook or something other authentication
passport.serializeUser((user, done) => {
   done(null, user.id);
});

passport.deserializeUser((id, done) => {
   User.findById(id)
      .then(user => {
         done(null, user);
   });
});


passport.use(
   new GoogleStrategy({
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
   }, (accessToken, refreshToken, profile, done) => {

      User.findOne({ googleId: profile.id})
         .then((existingUser) => {
            if(existingUser) {
               //we already have a record with the given profile id
               done(null, existingUser);//
            } else {
               //we want to make a new user with this profile id and save to database
               new User({ googleId: profile.id })//creates a mongoose model instance (a single model in our collection)
                  .save()//saves to database for us
                  .then(user => done(null, existingUser));
               
            }
         });

   }
 )
);